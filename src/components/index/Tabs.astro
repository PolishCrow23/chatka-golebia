---
import type { CollectionEntry } from "astro:content";
import Meetup from "../MeetupLongCard.astro";
import Report from "../ReportCard.astro";

type Props = {
    meetups: CollectionEntry<"meetups">[];
    reports: CollectionEntry<"reports">[];
}
const { meetups, reports } = Astro.props;
---

<section>
  <div class="container">
  <h2>Aktualności</h2>
    <div class="tabs">
      <input class="radiotab" name="tabs" tabindex="1" type="radio" id="tabone" checked="checked">
      <label class="label label-one" for="tabone">Wydarzenia</label>
      <div class="panel panel-one" tabindex="1">
        <div class="cards">
          {meetups.slice(0, 3).map((meetup) => <Meetup meetup={meetup} />)}
        </div>
        <a href="/meetups">Pokaż wszystkie</a>
      </div>

      <input class="radiotab" tabindex="1" name="tabs" type="radio" id="tabtwo">
      <label class="label label-two" for="tabtwo">Nowości</label>
      <div class="panel panel-two" tabindex="1">
        <div class="cards">
          {reports.slice(0, 3).map((report) => <Report report={report} />)}
        </div>
      </div>

      <input class="radiotab" tabindex="1" name="tabs" type="radio" id="tabthree">
      <label class="label label-three" for="tabthree" >Interwencje</label>
      <div class="panel panel-three" tabindex="1">
      </div>
    </div>
  </div>
</section>

<style>

section {
  background-color: var(--cream);
}

h2 {
  font-size: 4rem;

  color: var(--dark-plum);
}

p {
  margin: 0 0 20px;
  font-size: 20px;
  line-height: 1.5;
}

.tabs {
  display: flex;
  flex-wrap: wrap;
  margin: 0 auto;
  border-radius: 10px 10px 0 0;
}

.cards {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  gap: 2em;
}

.radiotab {
  position: absolute;
  opacity: 0;
}

.label {
  width: 100%;
  padding: 22px 20px;
  background: #e5e5e5;
  cursor: pointer;
  font-weight: bold;
  font-size: 23px;
  color: #7f7f7f;
  transition: background .3s, color .3s;
  border: none;
  border-radius: 0;
  text-align: center;

}

.label:nth-of-type(2) {
  background-color: var(--light-lavender);
}

.label:nth-of-type(3) {
  background-color: var(--peach);
}

.radiotab:checked + .label {
  border-bottom: none;
}

.panel {
  display: none;
  padding: 20px 30px 30px;
  background: #fff;
  width: 100%;
  min-height: 460px;
}

.panel:nth-of-type(2) {
  background-color: var(--light-lavender);
}

.panel:nth-of-type(3) {
  background-color: var(--peach);
}

.radiotab:checked + .label + .panel {
  display: block;
}

@media (min-width: 900px) {
  .panel {
    order: 99;
  }

  .label {
    width: 33.33%;
    border-radius: 36px 36px 0 0;
  }

  .cards {
    flex-direction: row;
  }

  .label {
    max-width: 300px;
  }

  .label:first-of-type {
    margin-left: 10%;
  } 

}


.panel {
  opacity: 0;
  transform: translateY(30px);
  transition: opacity 1s ease-in-out, transform 1s ease-in-out;
}

.radiotab:checked + .label + .panel {
  opacity: 1;
  transform: translateY(0);
}

/* Optional: Add a delay before the tab switches */
.radiotab:not(:checked) + .label + .panel {
  transition-delay: 0.5s;
}

</style>

<script>
  let currentIndex = 0;
  const tabs = document.querySelectorAll('.radiotab');
  let switchInterval = setInterval(switchTab, 6000); // Switch every 6 seconds

  function switchTab() {
    currentIndex = (currentIndex + 1) % tabs.length;

    const tab = tabs[currentIndex] as HTMLInputElement; // Type assertion
    tab.checked = true;

    // Trigger reflow to restart the animation
    const panel = tab.nextElementSibling?.nextElementSibling as HTMLElement | null;
    if (panel) {
      panel.style.opacity = '0';
      panel.style.transform = 'translateY(30px)';
      setTimeout(() => {
        panel.style.opacity = '1';
        panel.style.transform = 'translateY(0)';
      }, 10);
    }
  }

  // Stop the interval when the user clicks on any tab
  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      clearInterval(switchInterval);
    });
  });
</script>